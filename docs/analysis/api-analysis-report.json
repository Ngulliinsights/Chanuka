{
  "summary": {
    "totalAPICalls": 105,
    "criticalRisk": 0,
    "highRisk": 0,
    "mediumRisk": 33,
    "lowRisk": 72,
    "riskScore": 1.31,
    "averageConfidence": 0.7999999999999984,
    "analysisTime": 110.50410000000002
  },
  "criticalIssues": [],
  "apiCallsByType": {
    "fetch": 72,
    "useQuery": 32,
    "useSafeQuery": 1
  },
  "raceConditionHotspots": [
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:225:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 225,
        "column": 0,
        "context": "};\n\n  const handleHighlight = async (commentId: number) => {\n    try {\n      const response = await fetch(`/api/comments/${commentId}/highlight`, {\n        method: 'POST',\n      });\n\n      if (respons"
      },
      "endpoint": "/api/comments/${commentId}/highlight",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/comments/${commentId}/highlight`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/comments/${commentId}/highlight`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/comments/${commentId}/highlight`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:71:fetch:1752955410305",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 71,
        "column": 0,
        "context": "   queryKey: ['bill-engagement', billId],\r\n    queryFn: async () => {\r\n      const response = await fetch(`/api/bill-tracking/${billId}/engagement`);\r\n      if (!response.ok) throw new Error('Failed t"
      },
      "endpoint": "/api/bill-tracking/${billId}/engagement",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bill-tracking/${billId}/engagement`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bill-tracking/${billId}/engagement`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bill-tracking/${billId}/engagement`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx:120:fetch:1752955410306",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx",
        "line": 120,
        "column": 0,
        "context": ");\n  }, [billId]);\n\n  const fetchWorkarounds = async () => {\n    try {\n      const response = await fetch(`/api/bills/${billId}/implementation-workarounds`);\n      if (response.ok) {\n        const dat"
      },
      "endpoint": "/api/bills/${billId}/implementation-workarounds",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/implementation-workarounds`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/implementation-workarounds`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/implementation-workarounds`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.306Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\database-status.tsx:207:fetch:1752955410308",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\database-status.tsx",
        "line": 207,
        "column": 0,
        "context": "eQuery({\n    queryKey: ['database-status'],\n    queryFn: async () => {\n      const response = await fetch('/api/system/database/status');\n      if (!response.ok) {\n        throw new Error('Failed to f"
      },
      "endpoint": "/api/system/database/status",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/system/database/status'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/system/database/status'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/system/database/status'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.308Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx:154:fetch:1752955410310",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx",
        "line": 154,
        "column": 0,
        "context": "arams({\n        status: filterStatus,\n        sort: sortBy,\n      });\n\n      const response = await fetch(`/api/bills/${billId}/workarounds?${params}`);\n\n      if (!response.ok) {\n        throw new Er"
      },
      "endpoint": "/api/bills/${billId}/workarounds?${params}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/workarounds?${params}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/workarounds?${params}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/workarounds?${params}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.310Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\monitoring\\monitoring-dashboard.tsx:90:fetch:1752955410314",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\monitoring\\monitoring-dashboard.tsx",
        "line": 90,
        "column": 0,
        "context": "State(true);\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      const response = await fetch('/api/monitoring/system/dashboard');\r\n      if (!response.ok) {\r\n        throw new Error('Fail"
      },
      "endpoint": "/api/monitoring/system/dashboard",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/monitoring/system/dashboard'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/monitoring/system/dashboard'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/monitoring/system/dashboard'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.314Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:31:useQuery:1752955410315",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 31,
        "column": 0,
        "context": "lse);\r\n  const queryClient = useQueryClient();\r\n\r\n  const { data: notifications = [], isLoading } = useQuery({\r\n    queryKey: ['notifications'],\r\n    queryFn: async () => {\r\n      const response = awa"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "race-condition",
          "severity": "MEDIUM",
          "description": "Multiple useQuery hooks that could cause race conditions",
          "confidence": 0.8,
          "pattern": "useQuery.*useQuery",
          "codeSnippet": "useQuery("
        }
      ],
      "suggestions": [
        {
          "priority": "medium",
          "action": "Use query dependencies or combine into single query",
          "impact": "Addresses race-condition issue: Multiple useQuery hooks that could cause race conditions",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx:90:fetch:1752955410320",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx",
        "line": 90,
        "column": 0,
        "context": "efreshing(true);\r\n      const [dashboardResponse, conflictsResponse] = await Promise.all([\r\n        fetch('/api/sponsor-conflict-analysis/dashboard'),\r\n        fetch('/api/sponsor-conflict-analysis/de"
      },
      "endpoint": "/api/sponsor-conflict-analysis/dashboard",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/dashboard'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/dashboard'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/dashboard'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.320Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx:91:fetch:1752955410320",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx",
        "line": 91,
        "column": 0,
        "context": "esponse] = await Promise.all([\r\n        fetch('/api/sponsor-conflict-analysis/dashboard'),\r\n        fetch('/api/sponsor-conflict-analysis/detect')\r\n      ]);\r\n\r\n      if (!dashboardResponse.ok || !con"
      },
      "endpoint": "/api/sponsor-conflict-analysis/detect",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/detect'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/detect'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/detect'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.320Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictNetworkVisualization.tsx:89:fetch:1752955410320",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictNetworkVisualization.tsx",
        "line": 89,
        "column": 0,
        "context": "   if (sponsorId) params.append('sponsorId', sponsorId.toString());\r\n\r\n      const response = await fetch(`/api/sponsor-conflict-analysis/mapping?${params}`);\r\n      if (!response.ok) {\r\n        throw"
      },
      "endpoint": "/api/sponsor-conflict-analysis/mapping?${params}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsor-conflict-analysis/mapping?${params}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsor-conflict-analysis/mapping?${params}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsor-conflict-analysis/mapping?${params}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.320Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:235:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 235,
        "column": 0,
        "context": "queryKey: ['sponsorship-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/analysis`);\n      if (!response.ok) {\n        throw new Erro"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:249:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 249,
        "column": 0,
        "context": "yKey: ['primary-sponsor-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`);\n      if (!response.ok) {\n        throw n"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/primary-sponsor",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:263:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 263,
        "column": 0,
        "context": "queryKey: ['co-sponsors-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/co-sponsors`);\n      if (!response.ok) {\n        throw new E"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/co-sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/co-sponsors`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/co-sponsors`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/co-sponsors`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:277:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 277,
        "column": 0,
        "context": "ey: ['financial-network-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/financial-network`);\n      if (!response.ok) {\n        throw"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/financial-network",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/financial-network`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/financial-network`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/financial-network`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:40:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 40,
        "column": 0,
        "context": "seQuery({\n    queryKey: ['/api/bills', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/bills/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch bill')"
      },
      "endpoint": "/api/bills/${id}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:54:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 54,
        "column": 0,
        "context": "({\n    queryKey: ['/api/bills/categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/bills/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch c"
      },
      "endpoint": "/api/bills/categories",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/bills/categories'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/bills/categories'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/bills/categories'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:67:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 67,
        "column": 0,
        "context": "ry({\n    queryKey: ['/api/bills/statuses'],\n    queryFn: async () => {\n      const response = await fetch('/api/bills/statuses');\n      if (!response.ok) {\n        throw new Error('Failed to fetch sta"
      },
      "endpoint": "/api/bills/statuses",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/bills/statuses'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/bills/statuses'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/bills/statuses'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:80:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 80,
        "column": 0,
        "context": "eryKey: ['/api/bills', billId, 'sponsors'],\n    queryFn: async () => {\n      const response = await fetch(`/api/bills/${billId}/sponsors`);\n      if (!response.ok) {\n        throw new Error('Failed to"
      },
      "endpoint": "/api/bills/${billId}/sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsors`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsors`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsors`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:94:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 94,
        "column": 0,
        "context": "eryKey: ['/api/bills', billId, 'analysis'],\n    queryFn: async () => {\n      const response = await fetch(`/api/bills/${billId}/analysis`);\n      if (!response.ok) {\n        throw new Error('Failed to"
      },
      "endpoint": "/api/bills/${billId}/analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bill-detail.tsx:79:fetch:1752955410346",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bill-detail.tsx",
        "line": 79,
        "column": 0,
        "context": " setLoading(true);\n      setError(null); // Clear any previous errors\n\n      const response = await fetch(`/api/bills/${id}`);\n\n      if (!response.ok) {\n        // More specific error handling based "
      },
      "endpoint": "/api/bills/${id}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.346Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bills-dashboard.tsx:100:fetch:1752955410348",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bills-dashboard.tsx",
        "line": 100,
        "column": 0,
        "context": "nst fetchBills = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/bills');\n        if (!response.ok) {\n          throw new Error('Failed to fetch bills');"
      },
      "endpoint": "/api/bills",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/bills'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/bills'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/bills'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.348Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\search.tsx:87:fetch:1752955410354",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\search.tsx",
        "line": 87,
        "column": 0,
        "context": "age', currentPage.toString());\r\n      params.append('limit', '20');\r\n\r\n      const response = await fetch(`/api/search?${params.toString()}`);\r\n      if (!response.ok) throw new Error('Search failed')"
      },
      "endpoint": "/api/search?${params.toString()}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/search?${params.toString()}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/search?${params.toString()}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/search?${params.toString()}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.354Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\co-sponsors.tsx:52:fetch:1752955410354",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\co-sponsors.tsx",
        "line": 52,
        "column": 0,
        "context": "CoSponsorsData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`);\n\n        if (response.ok) {\n        "
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis/co-sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.354Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\financial-network.tsx:45:fetch:1752955410355",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\financial-network.tsx",
        "line": 45,
        "column": 0,
        "context": "tchNetworkData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`);\n\n        if (response.ok) {\n  "
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis/financial-network",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.355Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\overview.tsx:59:fetch:1752955410356",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\overview.tsx",
        "line": 59,
        "column": 0,
        "context": ") => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis`);\n        \n        if (!response.ok) {\n          t"
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.356Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\primary-sponsor.tsx:93:fetch:1752955410357",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\primary-sponsor.tsx",
        "line": 93,
        "column": 0,
        "context": ") => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`);\n\n        if (!response.ok) {\n   "
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis/primary-sponsor",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.357Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\analysis.ts:30:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\analysis.ts",
        "line": 30,
        "column": 0,
        "context": "  async analyzeBill(billId: number): Promise<BillAnalysis> {\n    try {\n      const response = await fetch(`/api/bills/${billId}/analysis`);\n      if (!response.ok) {\n        throw new Error('Analysis "
      },
      "endpoint": "/api/bills/${billId}/analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts:5:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts",
        "line": 5,
        "column": 0,
        "context": "//localhost:5000';\n\nexport const api = {\n  async get(endpoint: string) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! stat"
      },
      "endpoint": "${API_BASE_URL}${endpoint}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts:41:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts",
        "line": 41,
        "column": 0,
        "context": "  }\n    return response.json();\n  },\n\n  async delete(endpoint: string) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      "
      },
      "endpoint": "${API_BASE_URL}${endpoint}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    }
  ],
  "infiniteLoopRisks": [],
  "recommendations": [
    {
      "priority": "high",
      "action": "Implement comprehensive caching strategy",
      "impact": "105 out of 105 API calls lack caching configuration",
      "estimatedEffort": "medium"
    },
    {
      "priority": "high",
      "action": "Implement request coordination and cancellation",
      "impact": "33 API calls have race condition risks",
      "estimatedEffort": "medium"
    },
    {
      "priority": "medium",
      "action": "Add retry logic and proper error handling",
      "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
      "estimatedEffort": "medium"
    },
    {
      "priority": "medium",
      "action": "Use query dependencies or combine into single query",
      "impact": "Addresses race-condition issue: Multiple useQuery hooks that could cause race conditions",
      "estimatedEffort": "medium"
    },
    {
      "priority": "medium",
      "action": "Add staleTime and gcTime for optimal caching",
      "impact": "Addresses caching issue: useQuery without explicit caching configuration",
      "estimatedEffort": "medium"
    },
    {
      "priority": "low",
      "action": "Consider adding cache headers or using cached request wrapper",
      "impact": "Addresses caching issue: Fetch call without caching strategy",
      "estimatedEffort": "medium"
    },
    {
      "priority": "low",
      "action": "Add AbortController for request cancellation",
      "impact": "Addresses race-condition issue: Fetch without cancellation support",
      "estimatedEffort": "medium"
    }
  ],
  "detailedAnalysis": [
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:100:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 100,
        "column": 0,
        "context": ";\n  }, [newComment]);\n\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`/api/bills/${billId}/comments?sort=${sortBy}&expert=${filterExpert}&section=${billSection || "
      },
      "endpoint": "/api/bills/${billId}/comments?sort=${sortBy}&expert=${filterExpert}&section=${billSection || ",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:147:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 147,
        "column": 0,
        "context": "rim() || pollData.options.some(opt => !opt.trim())) return;\n\n    try {\n      const response = await fetch(`/api/bills/${billId}/polls`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'ap"
      },
      "endpoint": "/api/bills/${billId}/polls",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:169:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 169,
        "column": 0,
        "context": "leVote = async (commentId: number, type: 'up' | 'down') => {\n    try {\n      const response = await fetch(`/api/comments/${commentId}/vote`, {\n        method: 'POST',\n        headers: { 'Content-Type'"
      },
      "endpoint": "/api/comments/${commentId}/vote",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:185:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 185,
        "column": 0,
        "context": "llVote = async (commentId: number, optionIndex: number) => {\n    try {\n      const response = await fetch(`/api/comments/${commentId}/poll-vote`, {\n        method: 'POST',\n        headers: { 'Content-"
      },
      "endpoint": "/api/comments/${commentId}/poll-vote",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:203:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 203,
        "column": 0,
        "context": "arentId: number) => {\n    if (!replyContent.trim()) return;\n\n    try {\n      const response = await fetch(`/api/bills/${billId}/comments`, {\n        method: 'POST',\n        headers: { 'Content-Type': "
      },
      "endpoint": "/api/bills/${billId}/comments",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx:225:fetch:1752955410300",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analysis\\comments.tsx",
        "line": 225,
        "column": 0,
        "context": "};\n\n  const handleHighlight = async (commentId: number) => {\n    try {\n      const response = await fetch(`/api/comments/${commentId}/highlight`, {\n        method: 'POST',\n      });\n\n      if (respons"
      },
      "endpoint": "/api/comments/${commentId}/highlight",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/comments/${commentId}/highlight`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/comments/${commentId}/highlight`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/comments/${commentId}/highlight`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.300Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analytics\\engagement-dashboard.tsx:144:fetch:1752955410302",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analytics\\engagement-dashboard.tsx",
        "line": 144,
        "column": 0,
        "context": "loadDashboardData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch('/api/engagement-analytics/dashboard', {\r\n        headers: {\r\n          'Authorization': `Bear"
      },
      "endpoint": "/api/engagement-analytics/dashboard",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.302Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analytics\\engagement-dashboard.tsx:165:fetch:1752955410302",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\analytics\\engagement-dashboard.tsx",
        "line": 165,
        "column": 0,
        "context": "nst exportData = async (type: string, format: string) => {\r\n    try {\r\n      const response = await fetch(`/api/engagement-analytics/export?type=${type}&format=${format}`, {\r\n        headers: {\r\n     "
      },
      "endpoint": "/api/engagement-analytics/export?type=${type}&format=${format}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.302Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:57:fetch:1752955410305",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 57,
        "column": 0,
        "context": "\n    queryKey: ['bill-tracking', billId],\r\n    queryFn: async () => {\r\n      const response = await fetch(`/api/bill-tracking/${billId}/tracking-status`, {\r\n        headers: {\r\n          'Authorizatio"
      },
      "endpoint": "/api/bill-tracking/${billId}/tracking-status",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:71:fetch:1752955410305",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 71,
        "column": 0,
        "context": "   queryKey: ['bill-engagement', billId],\r\n    queryFn: async () => {\r\n      const response = await fetch(`/api/bill-tracking/${billId}/engagement`);\r\n      if (!response.ok) throw new Error('Failed t"
      },
      "endpoint": "/api/bill-tracking/${billId}/engagement",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bill-tracking/${billId}/engagement`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bill-tracking/${billId}/engagement`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bill-tracking/${billId}/engagement`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:80:fetch:1752955410305",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 80,
        "column": 0,
        "context": "onst trackBillMutation = useMutation({\r\n    mutationFn: async () => {\r\n      const response = await fetch(`/api/bill-tracking/${billId}/track`, {\r\n        method: 'POST',\r\n        headers: {\r\n        "
      },
      "endpoint": "/api/bill-tracking/${billId}/track",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:113:fetch:1752955410305",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 113,
        "column": 0,
        "context": "st untrackBillMutation = useMutation({\r\n    mutationFn: async () => {\r\n      const response = await fetch(`/api/bill-tracking/${billId}/track`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n      "
      },
      "endpoint": "/api/bill-tracking/${billId}/track",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:141:fetch:1752955410305",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 141,
        "column": 0,
        "context": "nst recordViewMutation = useMutation({\r\n    mutationFn: async () => {\r\n      const response = await fetch(`/api/bill-tracking/${billId}/view`, {\r\n        method: 'POST',\r\n        headers: {\r\n         "
      },
      "endpoint": "/api/bill-tracking/${billId}/view",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:54:useQuery:1752955410305",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 54,
        "column": 0,
        "context": "Check if user is tracking this bill\r\n  const { data: trackingStatus, isLoading: trackingLoading } = useQuery({\r\n    queryKey: ['bill-tracking', billId],\r\n    queryFn: async () => {\r\n      const respon"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx:68:useQuery:1752955410305",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\bill-tracking.tsx",
        "line": 68,
        "column": 0,
        "context": "rn response.json();\r\n    }\r\n  });\r\n\r\n  // Get engagement stats\r\n  const { data: engagementStats } = useQuery({\r\n    queryKey: ['bill-engagement', billId],\r\n    queryFn: async () => {\r\n      const resp"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.305Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx:120:fetch:1752955410306",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx",
        "line": 120,
        "column": 0,
        "context": ");\n  }, [billId]);\n\n  const fetchWorkarounds = async () => {\n    try {\n      const response = await fetch(`/api/bills/${billId}/implementation-workarounds`);\n      if (response.ok) {\n        const dat"
      },
      "endpoint": "/api/bills/${billId}/implementation-workarounds",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/implementation-workarounds`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/implementation-workarounds`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/implementation-workarounds`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.306Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx:134:fetch:1752955410306",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx",
        "line": 134,
        "column": 0,
        "context": " handleConfirmWorkaround = async (workaroundId: string) => {\n    try {\n      const response = await fetch(`/api/implementation-workarounds/${workaroundId}/confirm`, {\n        method: 'POST',\n        h"
      },
      "endpoint": "/api/implementation-workarounds/${workaroundId}/confirm",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.306Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx:152:fetch:1752955410306",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\bills\\implementation-workarounds.tsx",
        "line": 152,
        "column": 0,
        "context": "   }\n  };\n\n  const handleReportNewWorkaround = async () => {\n    try {\n      const response = await fetch('/api/implementation-workarounds', {\n        method: 'POST',\n        headers: {\n          'Aut"
      },
      "endpoint": "/api/implementation-workarounds",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.306Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\database-status.tsx:207:fetch:1752955410308",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\database-status.tsx",
        "line": 207,
        "column": 0,
        "context": "eQuery({\n    queryKey: ['database-status'],\n    queryFn: async () => {\n      const response = await fetch('/api/system/database/status');\n      if (!response.ok) {\n        throw new Error('Failed to f"
      },
      "endpoint": "/api/system/database/status",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/system/database/status'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/system/database/status'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/system/database/status'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.308Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\database-status.tsx:204:useQuery:1752955410308",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\database-status.tsx",
        "line": 204,
        "column": 0,
        "context": "d database status endpoint to match refactored routes\n  const { data, isLoading, error, refetch } = useQuery({\n    queryKey: ['database-status'],\n    queryFn: async () => {\n      const response = awai"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.308Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx:154:fetch:1752955410310",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx",
        "line": 154,
        "column": 0,
        "context": "arams({\n        status: filterStatus,\n        sort: sortBy,\n      });\n\n      const response = await fetch(`/api/bills/${billId}/workarounds?${params}`);\n\n      if (!response.ok) {\n        throw new Er"
      },
      "endpoint": "/api/bills/${billId}/workarounds?${params}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/workarounds?${params}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/workarounds?${params}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/workarounds?${params}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.310Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx:191:fetch:1752955410310",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx",
        "line": 191,
        "column": 0,
        "context": "eEstimate ? parseInt(newWorkaround.timelineEstimate) : null,\n      };\n\n      const response = await fetch(`/api/bills/${billId}/workarounds`, {\n        method: 'POST',\n        headers: { 'Content-Type"
      },
      "endpoint": "/api/bills/${billId}/workarounds",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.310Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx:223:fetch:1752955410310",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\implementation\\workarounds.tsx",
        "line": 223,
        "column": 0,
        "context": "tVotingStates(prev => ({ ...prev, [workaroundId]: true }));\n\n    try {\n      const response = await fetch(`/api/workarounds/${workaroundId}/vote`, {\n        method: 'POST',\n        headers: { 'Content"
      },
      "endpoint": "/api/workarounds/${workaroundId}/vote",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.310Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx:38:fetch:1752955410312",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx",
        "line": 38,
        "column": 0,
        "context": "ocalStorage.getItem('token');\r\n      if (!token) return null;\r\n      \r\n      const response = await fetch('/api/auth/verify', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n     "
      },
      "endpoint": "/api/auth/verify",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.312Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx:53:fetch:1752955410312",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx",
        "line": 53,
        "column": 0,
        "context": "read-count'],\r\n    queryFn: async () => {\r\n      if (!user) return 0;\r\n      const response = await fetch('/api/notifications/unread-count', {\r\n        headers: {\r\n          'Authorization': `Bearer $"
      },
      "endpoint": "/api/notifications/unread-count",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.312Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx:32:useQuery:1752955410312",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx",
        "line": 32,
        "column": 0,
        "context": "sOpen, setIsOpen] = useState(false);\r\n  const location = useLocation();\r\n\r\n  const { data: user } = useQuery({\r\n    queryKey: ['auth', 'user'],\r\n    queryFn: async () => {\r\n      const token = localSt"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.312Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx:49:useQuery:1752955410312",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\layout\\mobile-navigation.tsx",
        "line": 49,
        "column": 0,
        "context": "wait response.json();\r\n      return data.user;\r\n    }\r\n  });\r\n\r\n  const { data: unreadCount = 0 } = useQuery({\r\n    queryKey: ['notifications', 'unread-count'],\r\n    queryFn: async () => {\r\n      if ("
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.312Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\monitoring\\monitoring-dashboard.tsx:90:fetch:1752955410314",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\monitoring\\monitoring-dashboard.tsx",
        "line": 90,
        "column": 0,
        "context": "State(true);\r\n\r\n  const fetchDashboardData = async () => {\r\n    try {\r\n      const response = await fetch('/api/monitoring/system/dashboard');\r\n      if (!response.ok) {\r\n        throw new Error('Fail"
      },
      "endpoint": "/api/monitoring/system/dashboard",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/monitoring/system/dashboard'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/monitoring/system/dashboard'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/monitoring/system/dashboard'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.314Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:34:fetch:1752955410315",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 34,
        "column": 0,
        "context": "Query({\r\n    queryKey: ['notifications'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/notifications', {\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage"
      },
      "endpoint": "/api/notifications",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:49:fetch:1752955410315",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 49,
        "column": 0,
        "context": "ryKey: ['notifications', 'unread-count'],\r\n    queryFn: async () => {\r\n      const response = await fetch('/api/notifications/unread-count', {\r\n        headers: {\r\n          'Authorization': `Bearer $"
      },
      "endpoint": "/api/notifications/unread-count",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:63:fetch:1752955410315",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 63,
        "column": 0,
        "context": " = useMutation({\r\n    mutationFn: async (notificationId: number) => {\r\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n"
      },
      "endpoint": "/api/notifications/${notificationId}/read",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:78:fetch:1752955410315",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 78,
        "column": 0,
        "context": " markAllAsReadMutation = useMutation({\r\n    mutationFn: async () => {\r\n      const response = await fetch('/api/notifications/read-all', {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Aut"
      },
      "endpoint": "/api/notifications/read-all",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:31:useQuery:1752955410315",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 31,
        "column": 0,
        "context": "lse);\r\n  const queryClient = useQueryClient();\r\n\r\n  const { data: notifications = [], isLoading } = useQuery({\r\n    queryKey: ['notifications'],\r\n    queryFn: async () => {\r\n      const response = awa"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "race-condition",
          "severity": "MEDIUM",
          "description": "Multiple useQuery hooks that could cause race conditions",
          "confidence": 0.8,
          "pattern": "useQuery.*useQuery",
          "codeSnippet": "useQuery("
        }
      ],
      "suggestions": [
        {
          "priority": "medium",
          "action": "Use query dependencies or combine into single query",
          "impact": "Addresses race-condition issue: Multiple useQuery hooks that could cause race conditions",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx:46:useQuery:1752955410315",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-center.tsx",
        "line": 46,
        "column": 0,
        "context": "   refetchInterval: 30000 // Refetch every 30 seconds\r\n  });\r\n\r\n  const { data: unreadCount = 0 } = useQuery({\r\n    queryKey: ['notifications', 'unread-count'],\r\n    queryFn: async () => {\r\n      cons"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.315Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-preferences.tsx:104:fetch:1752955410316",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-preferences.tsx",
        "line": 104,
        "column": 0,
        "context": "();\r\n  }, []);\r\n\r\n  const fetchPreferences = async () => {\r\n    try {\r\n      const response = await fetch('/api/notifications/preferences', {\r\n        headers: {\r\n          'Authorization': `Bearer ${"
      },
      "endpoint": "/api/notifications/preferences",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-preferences.tsx:132:fetch:1752955410316",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-preferences.tsx",
        "line": 132,
        "column": 0,
        "context": "> {\r\n    if (!preferences) return;\r\n\r\n    setSaving(true);\r\n    try {\r\n      const response = await fetch('/api/notifications/preferences', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Co"
      },
      "endpoint": "/api/notifications/preferences",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-preferences.tsx:162:fetch:1752955410316",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\notifications\\notification-preferences.tsx",
        "line": 162,
        "column": 0,
        "context": "   }\r\n  };\r\n\r\n  const sendTestNotification = async () => {\r\n    try {\r\n      const response = await fetch('/api/notifications/test', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authoriz"
      },
      "endpoint": "/api/notifications/test",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx:84:fetch:1752955410316",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx",
        "line": 84,
        "column": 0,
        "context": " [\"profile\", \"me\"],\r\n    queryFn: async (): Promise<UserProfile> => {\r\n      const response = await fetch(\"/api/profile/me\", {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getI"
      },
      "endpoint": "/api/profile/me",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx:101:fetch:1752955410316",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx",
        "line": 101,
        "column": 0,
        "context": "tionFn: async (data: ProfileUpdatePayload): Promise<UserProfile> => {\r\n      const response = await fetch(\"/api/profile/me\", {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": "
      },
      "endpoint": "/api/profile/me",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx:135:fetch:1752955410316",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx",
        "line": 135,
        "column": 0,
        "context": "   mutationFn: async (interests: string[]): Promise<UserProfile> => {\r\n      const response = await fetch(\"/api/profile/me/interests\", {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Conte"
      },
      "endpoint": "/api/profile/me/interests",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx:81:useQuery:1752955410316",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\profile\\user-profile.tsx",
        "line": 81,
        "column": 0,
        "context": "();\r\n\r\n  // Fetch profile with proper error handling\r\n  const { data: profile, isLoading, error } = useQuery({\r\n    queryKey: [\"profile\", \"me\"],\r\n    queryFn: async (): Promise<UserProfile> => {\r\n    "
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.316Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\real-time\\BillTrackingPreferences.tsx:57:fetch:1752955410317",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\real-time\\BillTrackingPreferences.tsx",
        "line": 57,
        "column": 0,
        "context": "s();\r\n  }, []);\r\n\r\n  const loadPreferences = async () => {\r\n    try {\r\n      const response = await fetch('/api/real-time/preferences', {\r\n        headers: {\r\n          'Authorization': `Bearer ${loca"
      },
      "endpoint": "/api/real-time/preferences",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.317Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\real-time\\BillTrackingPreferences.tsx:79:fetch:1752955410317",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\real-time\\BillTrackingPreferences.tsx",
        "line": 79,
        "column": 0,
        "context": "ync () => {\r\n    setLoading(true);\r\n    setSaved(false);\r\n\r\n    try {\r\n      const response = await fetch('/api/real-time/preferences', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Conten"
      },
      "endpoint": "/api/real-time/preferences",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.317Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx:104:fetch:1752955410318",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx",
        "line": 104,
        "column": 0,
        "context": "s();\r\n  }, []);\r\n\r\n  const loadPreferences = async () => {\r\n    try {\r\n      const response = await fetch('/api/alert-preferences', {\r\n        headers: {\r\n          'Authorization': `Bearer ${localSto"
      },
      "endpoint": "/api/alert-preferences",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.318Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx:124:fetch:1752955410318",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx",
        "line": 124,
        "column": 0,
        "context": "lse);\r\n    }\r\n  };\r\n\r\n  const loadChannels = async () => {\r\n    try {\r\n      const response = await fetch('/api/alert-preferences/channels', {\r\n        headers: {\r\n          'Authorization': `Bearer $"
      },
      "endpoint": "/api/alert-preferences/channels",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.318Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx:141:fetch:1752955410318",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx",
        "line": 141,
        "column": 0,
        "context": "r);\r\n    }\r\n  };\r\n\r\n  const loadCategories = async () => {\r\n    try {\r\n      const response = await fetch('/api/alert-preferences/categories', {\r\n        headers: {\r\n          'Authorization': `Bearer"
      },
      "endpoint": "/api/alert-preferences/categories",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.318Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx:158:fetch:1752955410318",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx",
        "line": 158,
        "column": 0,
        "context": "ror);\r\n    }\r\n  };\r\n\r\n  const loadSponsors = async () => {\r\n    try {\r\n      const response = await fetch('/api/alert-preferences/sponsors', {\r\n        headers: {\r\n          'Authorization': `Bearer $"
      },
      "endpoint": "/api/alert-preferences/sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.318Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx:178:fetch:1752955410318",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx",
        "line": 178,
        "column": 0,
        "context": "> {\r\n    if (!preferences) return;\r\n\r\n    setSaving(true);\r\n    try {\r\n      const response = await fetch('/api/alert-preferences', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Ty"
      },
      "endpoint": "/api/alert-preferences",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.318Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx:203:fetch:1752955410319",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\settings\\alert-preferences.tsx",
        "line": 203,
        "column": 0,
        "context": "string = 'medium') => {\r\n    setTestingNotification(true);\r\n    try {\r\n      const response = await fetch('/api/alert-preferences/test', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Cont"
      },
      "endpoint": "/api/alert-preferences/test",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.319Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx:90:fetch:1752955410320",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx",
        "line": 90,
        "column": 0,
        "context": "efreshing(true);\r\n      const [dashboardResponse, conflictsResponse] = await Promise.all([\r\n        fetch('/api/sponsor-conflict-analysis/dashboard'),\r\n        fetch('/api/sponsor-conflict-analysis/de"
      },
      "endpoint": "/api/sponsor-conflict-analysis/dashboard",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/dashboard'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/dashboard'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/dashboard'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.320Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx:91:fetch:1752955410320",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictAnalysisDashboard.tsx",
        "line": 91,
        "column": 0,
        "context": "esponse] = await Promise.all([\r\n        fetch('/api/sponsor-conflict-analysis/dashboard'),\r\n        fetch('/api/sponsor-conflict-analysis/detect')\r\n      ]);\r\n\r\n      if (!dashboardResponse.ok || !con"
      },
      "endpoint": "/api/sponsor-conflict-analysis/detect",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/detect'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/detect'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/sponsor-conflict-analysis/detect'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.320Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictNetworkVisualization.tsx:89:fetch:1752955410320",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\components\\transparency\\ConflictNetworkVisualization.tsx",
        "line": 89,
        "column": 0,
        "context": "   if (sponsorId) params.append('sponsorId', sponsorId.toString());\r\n\r\n      const response = await fetch(`/api/sponsor-conflict-analysis/mapping?${params}`);\r\n      if (!response.ok) {\r\n        throw"
      },
      "endpoint": "/api/sponsor-conflict-analysis/mapping?${params}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsor-conflict-analysis/mapping?${params}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsor-conflict-analysis/mapping?${params}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsor-conflict-analysis/mapping?${params}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.320Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-auth.tsx:39:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-auth.tsx",
        "line": 39,
        "column": 0,
        "context": " }, []);\n\n  const validateToken = async (token: string) => {\n    try {\n      const response = await fetch('/api/auth/validate', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n      "
      },
      "endpoint": "/api/auth/validate",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-auth.tsx:64:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-auth.tsx",
        "line": 64,
        "column": 0,
        "context": "ccess: boolean; error?: string }> => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'app"
      },
      "endpoint": "/api/auth/login",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-auth.tsx:92:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-auth.tsx",
        "line": 92,
        "column": 0,
        "context": "ccess: boolean; error?: string }> => {\n    setLoading(true);\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': '"
      },
      "endpoint": "/api/auth/register",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:235:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 235,
        "column": 0,
        "context": "queryKey: ['sponsorship-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/analysis`);\n      if (!response.ok) {\n        throw new Erro"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:249:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 249,
        "column": 0,
        "context": "yKey: ['primary-sponsor-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`);\n      if (!response.ok) {\n        throw n"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/primary-sponsor",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/primary-sponsor`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:263:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 263,
        "column": 0,
        "context": "queryKey: ['co-sponsors-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/co-sponsors`);\n      if (!response.ok) {\n        throw new E"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/co-sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/co-sponsors`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/co-sponsors`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/co-sponsors`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:277:fetch:1752955410334",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 277,
        "column": 0,
        "context": "ey: ['financial-network-analysis', billId],\n    queryFn: async () => {\n      const response = await fetch(`/api/sponsorship/bills/${billId}/financial-network`);\n      if (!response.ok) {\n        throw"
      },
      "endpoint": "/api/sponsorship/bills/${billId}/financial-network",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/financial-network`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/financial-network`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/sponsorship/bills/${billId}/financial-network`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:109:useQuery:1752955410334",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 109,
        "column": 0,
        "context": "eryClient();\n\n  // Fetch bill analysis\n  const { data: analysisData, isLoading: analysisLoading } = useQuery({\n    queryKey: ['analysis', billId],\n    queryFn: async () => {\n      const res = await ap"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:119:useQuery:1752955410334",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 119,
        "column": 0,
        "context": ": !!billId,\n  });\n\n  // Fetch comments\n  const { data: commentsData, isLoading: commentsLoading } = useQuery({\n    queryKey: ['bills', billId, 'comments'],\n    queryFn: async () => {\n      const res ="
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:232:useQuery:1752955410334",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 232,
        "column": 0,
        "context": "ysis', billId] });\n    },\n  };\n}\n\nexport function useSponsorshipAnalysis(billId: string) {\n  return useQuery({\n    queryKey: ['sponsorship-analysis', billId],\n    queryFn: async () => {\n      const re"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:246:useQuery:1752955410334",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 246,
        "column": 0,
        "context": "   enabled: !!billId,\n  });\n}\n\nexport function usePrimarySponsorAnalysis(billId: string) {\n  return useQuery({\n    queryKey: ['primary-sponsor-analysis', billId],\n    queryFn: async () => {\n      cons"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:260:useQuery:1752955410334",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 260,
        "column": 0,
        "context": "},\n    enabled: !!billId,\n  });\n}\n\nexport function useCoSponsorsAnalysis(billId: string) {\n  return useQuery({\n    queryKey: ['co-sponsors-analysis', billId],\n    queryFn: async () => {\n      const re"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx:274:useQuery:1752955410334",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bill-analysis.tsx",
        "line": 274,
        "column": 0,
        "context": " enabled: !!billId,\n  });\n}\n\nexport function useFinancialNetworkAnalysis(billId: string) {\n  return useQuery({\n    queryKey: ['financial-network-analysis', billId],\n    queryFn: async () => {\n      co"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.334Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:40:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 40,
        "column": 0,
        "context": "seQuery({\n    queryKey: ['/api/bills', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/bills/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch bill')"
      },
      "endpoint": "/api/bills/${id}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:54:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 54,
        "column": 0,
        "context": "({\n    queryKey: ['/api/bills/categories'],\n    queryFn: async () => {\n      const response = await fetch('/api/bills/categories');\n      if (!response.ok) {\n        throw new Error('Failed to fetch c"
      },
      "endpoint": "/api/bills/categories",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/bills/categories'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/bills/categories'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/bills/categories'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:67:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 67,
        "column": 0,
        "context": "ry({\n    queryKey: ['/api/bills/statuses'],\n    queryFn: async () => {\n      const response = await fetch('/api/bills/statuses');\n      if (!response.ok) {\n        throw new Error('Failed to fetch sta"
      },
      "endpoint": "/api/bills/statuses",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/bills/statuses'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/bills/statuses'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/bills/statuses'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:80:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 80,
        "column": 0,
        "context": "eryKey: ['/api/bills', billId, 'sponsors'],\n    queryFn: async () => {\n      const response = await fetch(`/api/bills/${billId}/sponsors`);\n      if (!response.ok) {\n        throw new Error('Failed to"
      },
      "endpoint": "/api/bills/${billId}/sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsors`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsors`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsors`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:94:fetch:1752955410335",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 94,
        "column": 0,
        "context": "eryKey: ['/api/bills', billId, 'analysis'],\n    queryFn: async () => {\n      const response = await fetch(`/api/bills/${billId}/analysis`);\n      if (!response.ok) {\n        throw new Error('Failed to"
      },
      "endpoint": "/api/bills/${billId}/analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:13:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 13,
        "column": 0,
        "context": " limit?: number;\n  offset?: number;\n}\n\nexport function useBills(params: BillsQuery = {}) {\n  return useQuery({\n    queryKey: ['/api/bills', params],\n    queryFn: async () => {\n      const searchParams"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:37:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 37,
        "column": 0,
        "context": "    return response.json();\n    },\n  });\n}\n\nexport function useBill(id: string | number) {\n  return useQuery({\n    queryKey: ['/api/bills', id],\n    queryFn: async () => {\n      const response = await"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:51:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 51,
        "column": 0,
        "context": " response.json();\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useBillCategories() {\n  return useQuery({\n    queryKey: ['/api/bills/categories'],\n    queryFn: async () => {\n      const response "
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:64:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 64,
        "column": 0,
        "context": "\n      }\n      return response.json();\n    },\n  });\n}\n\nexport function useBillStatuses() {\n  return useQuery({\n    queryKey: ['/api/bills/statuses'],\n    queryFn: async () => {\n      const response = "
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:77:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 77,
        "column": 0,
        "context": "esponse.json();\n    },\n  });\n}\n\nexport function useBillSponsors(billId: string | number) {\n  return useQuery({\n    queryKey: ['/api/bills', billId, 'sponsors'],\n    queryFn: async () => {\n      const "
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts:91:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.ts",
        "line": 91,
        "column": 0,
        "context": "    enabled: !!billId,\n  });\n}\n\nexport function useBillAnalysis(billId: string | number) {\n  return useQuery({\n    queryKey: ['/api/bills', billId, 'analysis'],\n    queryFn: async () => {\n      const "
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx:6:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx",
        "line": 6,
        "column": 0,
        "context": "port function useBills(params?: { category?: string; status?: string; search?: string }) {\n  return useQuery({\n    queryKey: ['bills', params],\n    queryFn: () => billsApi.getAll(params),\n  });\n}\n\nexp"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "MEDIUM",
          "description": "useQuery without explicit caching configuration",
          "confidence": 0.7,
          "pattern": "useQuery\\s*\\(\\s*\\{[^}]*\\}",
          "codeSnippet": "useQuery("
        }
      ],
      "suggestions": [
        {
          "priority": "medium",
          "action": "Add staleTime and gcTime for optimal caching",
          "impact": "Addresses caching issue: useQuery without explicit caching configuration",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx:13:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx",
        "line": 13,
        "column": 0,
        "context": "    queryFn: () => billsApi.getAll(params),\n  });\n}\n\nexport function useBill(id: number) {\n  return useQuery({\n    queryKey: ['bills', id],\n    queryFn: () => billsApi.getById(id),\n    enabled: !!id,\n"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx:21:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx",
        "line": 21,
        "column": 0,
        "context": "getById(id),\n    enabled: !!id,\n  });\n}\n\nexport function useBillComments(billId: number) {\n  return useQuery({\n    queryKey: ['bills', billId, 'comments'],\n    queryFn: () => billsApi.getComments(bill"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx:29:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx",
        "line": 29,
        "column": 0,
        "context": "getComments(billId),\n    enabled: !!billId,\n  });\n}\n\nexport function useBillCategories() {\n  return useQuery({\n    queryKey: ['bills', 'categories'],\n    queryFn: () => billsApi.getCategories(),\n  });"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "MEDIUM",
          "description": "useQuery without explicit caching configuration",
          "confidence": 0.7,
          "pattern": "useQuery\\s*\\(\\s*\\{[^}]*\\}",
          "codeSnippet": "useQuery("
        }
      ],
      "suggestions": [
        {
          "priority": "medium",
          "action": "Add staleTime and gcTime for optimal caching",
          "impact": "Addresses caching issue: useQuery without explicit caching configuration",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx:36:useQuery:1752955410335",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-bills.tsx",
        "line": 36,
        "column": 0,
        "context": "\n    queryFn: () => billsApi.getCategories(),\n  });\n}\n\nexport function useBillStatuses() {\n  return useQuery({\n    queryKey: ['bills', 'statuses'],\n    queryFn: () => billsApi.getStatuses(),\n  });\n}\n\n"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "MEDIUM",
          "description": "useQuery without explicit caching configuration",
          "confidence": 0.7,
          "pattern": "useQuery\\s*\\(\\s*\\{[^}]*\\}",
          "codeSnippet": "useQuery("
        }
      ],
      "suggestions": [
        {
          "priority": "medium",
          "action": "Add staleTime and gcTime for optimal caching",
          "impact": "Addresses caching issue: useQuery without explicit caching configuration",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.335Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-safe-query.ts:177:useSafeQuery:1752955903697",
      "type": "useSafeQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-safe-query.ts",
        "line": 177,
        "column": 0,
        "context": "\r\n  \r\n  const queryResults = queries.map(({ key, endpoint, options = {} }) => {\r\n    const result = useSafeQuery({\r\n      queryKey: [key],\r\n      endpoint,\r\n      enabled: !activeQueriesRef.current.ha"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:11:43.697Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx:5:useQuery:1752955410337",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx",
        "line": 5,
        "column": 0,
        "context": "t-query';\nimport { systemApi } from '@/services/api';\n\nexport function useSystemHealth() {\n  return useQuery({\n    queryKey: ['system', 'health'],\n    queryFn: () => systemApi.getHealth(),\n    refetch"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.337Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx:13:useQuery:1752955410337",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx",
        "line": 13,
        "column": 0,
        "context": "chInterval: 30000, // Refetch every 30 seconds\n  });\n}\n\nexport function useSystemStats() {\n  return useQuery({\n    queryKey: ['system', 'stats'],\n    queryFn: () => systemApi.getStats(),\n    refetchIn"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.337Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx:21:useQuery:1752955410337",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx",
        "line": 21,
        "column": 0,
        "context": "tchInterval: 60000, // Refetch every minute\n  });\n}\n\nexport function useSystemActivity() {\n  return useQuery({\n    queryKey: ['system', 'activity'],\n    queryFn: () => systemApi.getActivity(),\n    ref"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.337Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx:29:useQuery:1752955410337",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx",
        "line": 29,
        "column": 0,
        "context": "pi.getActivity(),\n    refetchInterval: 30000,\n  });\n}\n\nexport function useSystemSchema() {\n  return useQuery({\n    queryKey: ['system', 'schema'],\n    queryFn: () => systemApi.getSchema(),\n  });\n}\n\nex"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "MEDIUM",
          "description": "useQuery without explicit caching configuration",
          "confidence": 0.7,
          "pattern": "useQuery\\s*\\(\\s*\\{[^}]*\\}",
          "codeSnippet": "useQuery("
        }
      ],
      "suggestions": [
        {
          "priority": "medium",
          "action": "Add staleTime and gcTime for optimal caching",
          "impact": "Addresses caching issue: useQuery without explicit caching configuration",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.337Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx:36:useQuery:1752955410337",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\hooks\\use-system.tsx",
        "line": 36,
        "column": 0,
        "context": "   queryFn: () => systemApi.getSchema(),\n  });\n}\n\nexport function useSystemEnvironment() {\n  return useQuery({\n    queryKey: ['system', 'environment'],\n    queryFn: () => systemApi.getEnvironment(),\n "
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.337Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\admin.tsx:14:fetch:1752955410343",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\admin.tsx",
        "line": 14,
        "column": 0,
        "context": "ocalStorage.getItem('token');\r\n      if (!token) return null;\r\n      \r\n      const response = await fetch('/api/auth/verify', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n     "
      },
      "endpoint": "/api/auth/verify",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.343Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\admin.tsx:8:useQuery:1752955410343",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\admin.tsx",
        "line": 8,
        "column": 0,
        "context": "y } from '@tanstack/react-query';\r\n\r\nconst AdminPage = () => {\r\n  const { data: user, isLoading } = useQuery({\r\n    queryKey: ['auth', 'user'],\r\n    queryFn: async () => {\r\n      const token = localSt"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.343Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bill-detail.tsx:79:fetch:1752955410346",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bill-detail.tsx",
        "line": 79,
        "column": 0,
        "context": " setLoading(true);\n      setError(null); // Clear any previous errors\n\n      const response = await fetch(`/api/bills/${id}`);\n\n      if (!response.ok) {\n        // More specific error handling based "
      },
      "endpoint": "/api/bills/${id}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${id}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.346Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bills-dashboard.tsx:100:fetch:1752955410348",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\bills-dashboard.tsx",
        "line": 100,
        "column": 0,
        "context": "nst fetchBills = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('/api/bills');\n        if (!response.ok) {\n          throw new Error('Failed to fetch bills');"
      },
      "endpoint": "/api/bills",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch('/api/bills'"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch('/api/bills'"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch('/api/bills'"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.348Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\comments.tsx:32:fetch:1752955410348",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\comments.tsx",
        "line": 32,
        "column": 0,
        "context": "tion] = useState('');\n\n  const fetchComments = async () => {\n    try {\n      const response = await fetch(`/api/community/comments/${billId}?sort=${sortBy}&expert=${filterExpert}&section=${billSection"
      },
      "endpoint": "/api/community/comments/${billId}?sort=${sortBy}&expert=${filterExpert}&section=${billSection || ",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.348Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\comments.tsx:48:fetch:1752955410348",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\comments.tsx",
        "line": 48,
        "column": 0,
        "context": "Comment = async () => {\n    if (!newComment.trim()) return;\n\n    try {\n      const response = await fetch(`/api/community/comments`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'appli"
      },
      "endpoint": "/api/community/comments",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.348Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\community-input.tsx:132:fetch:1752955410349",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\community-input.tsx",
        "line": 132,
        "column": 0,
        "context": "tatus\n        },\n        timestamp: new Date().toISOString()\n      };\n\n      const response = await fetch('/api/community/comments', {\n        method: 'POST',\n        headers: {\n          'Content-Typ"
      },
      "endpoint": "/api/community/comments",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.349Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\search.tsx:87:fetch:1752955410354",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\search.tsx",
        "line": 87,
        "column": 0,
        "context": "age', currentPage.toString());\r\n      params.append('limit', '20');\r\n\r\n      const response = await fetch(`/api/search?${params.toString()}`);\r\n      if (!response.ok) throw new Error('Search failed')"
      },
      "endpoint": "/api/search?${params.toString()}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/search?${params.toString()}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/search?${params.toString()}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/search?${params.toString()}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.354Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\search.tsx:70:useQuery:1752955410354",
      "type": "useQuery",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\search.tsx",
        "line": 70,
        "column": 0,
        "context": "[currentPage, setCurrentPage] = useState(1);\r\n\r\n  const { data: searchResults, isLoading, error } = useQuery({\r\n    queryKey: ['search', filters, currentPage],\r\n    queryFn: async (): Promise<SearchRe"
      },
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.354Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\co-sponsors.tsx:52:fetch:1752955410354",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\co-sponsors.tsx",
        "line": 52,
        "column": 0,
        "context": "CoSponsorsData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`);\n\n        if (response.ok) {\n        "
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis/co-sponsors",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/co-sponsors`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.354Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\financial-network.tsx:45:fetch:1752955410355",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\financial-network.tsx",
        "line": 45,
        "column": 0,
        "context": "tchNetworkData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`);\n\n        if (response.ok) {\n  "
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis/financial-network",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/financial-network`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.355Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\overview.tsx:59:fetch:1752955410356",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\overview.tsx",
        "line": 59,
        "column": 0,
        "context": ") => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis`);\n        \n        if (!response.ok) {\n          t"
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.356Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\primary-sponsor.tsx:93:fetch:1752955410357",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\pages\\sponsorship\\primary-sponsor.tsx",
        "line": 93,
        "column": 0,
        "context": ") => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`);\n\n        if (!response.ok) {\n   "
      },
      "endpoint": "/api/bills/${billId}/sponsorship-analysis/primary-sponsor",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/sponsorship-analysis/primary-sponsor`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.357Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\analysis.ts:30:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\analysis.ts",
        "line": 30,
        "column": 0,
        "context": "  async analyzeBill(billId: number): Promise<BillAnalysis> {\n    try {\n      const response = await fetch(`/api/bills/${billId}/analysis`);\n      if (!response.ok) {\n        throw new Error('Analysis "
      },
      "endpoint": "/api/bills/${billId}/analysis",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`/api/bills/${billId}/analysis`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts:5:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts",
        "line": 5,
        "column": 0,
        "context": "//localhost:5000';\n\nexport const api = {\n  async get(endpoint: string) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! stat"
      },
      "endpoint": "${API_BASE_URL}${endpoint}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts:13:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts",
        "line": 13,
        "column": 0,
        "context": "eturn response.json();\n  },\n\n  async post(endpoint: string, data: any) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type':"
      },
      "endpoint": "${API_BASE_URL}${endpoint}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts:27:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts",
        "line": 27,
        "column": 0,
        "context": "return response.json();\n  },\n\n  async put(endpoint: string, data: any) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': "
      },
      "endpoint": "${API_BASE_URL}${endpoint}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "LOW",
      "infiniteLoopRisk": "LOW",
      "issues": [],
      "suggestions": [],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    },
    {
      "id": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts:41:fetch:1752955410359",
      "type": "fetch",
      "location": {
        "file": "C:\\Users\\Access Granted\\Downloads\\SimpleTool\\client\\src\\services\\api.ts",
        "line": 41,
        "column": 0,
        "context": "  }\n    return response.json();\n  },\n\n  async delete(endpoint: string) {\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n    });\n    if (!response.ok) {\n      "
      },
      "endpoint": "${API_BASE_URL}${endpoint}",
      "dependencies": [],
      "triggers": [],
      "caching": {
        "hasCache": false
      },
      "raceConditionRisk": "MEDIUM",
      "infiniteLoopRisk": "LOW",
      "issues": [
        {
          "type": "caching",
          "severity": "LOW",
          "description": "Fetch call without caching strategy",
          "confidence": 0.6,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*cache)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "race-condition",
          "severity": "LOW",
          "description": "Fetch without cancellation support",
          "confidence": 0.7,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*AbortController|.*signal)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        },
        {
          "type": "performance",
          "severity": "MEDIUM",
          "description": "Fetch without retry or error handling strategy",
          "confidence": 0.8,
          "pattern": "fetch\\s*\\([^)]*\\)\\s*(?!.*retry|.*catch)",
          "codeSnippet": "fetch(`${API_BASE_URL}${endpoint}`"
        }
      ],
      "suggestions": [
        {
          "priority": "low",
          "action": "Consider adding cache headers or using cached request wrapper",
          "impact": "Addresses caching issue: Fetch call without caching strategy",
          "estimatedEffort": "medium"
        },
        {
          "priority": "low",
          "action": "Add AbortController for request cancellation",
          "impact": "Addresses race-condition issue: Fetch without cancellation support",
          "estimatedEffort": "medium"
        },
        {
          "priority": "medium",
          "action": "Add retry logic and proper error handling",
          "impact": "Addresses performance issue: Fetch without retry or error handling strategy",
          "estimatedEffort": "medium"
        }
      ],
      "confidence": 0.8,
      "lastModified": "2025-07-19T20:03:30.359Z"
    }
  ],
  "metadata": {
    "generatedAt": "2025-07-19T20:11:43.752Z",
    "filesAnalyzed": 275,
    "skippedFiles": 0,
    "configUsed": {
      "includePatterns": [
        ".ts",
        ".tsx",
        ".js",
        ".jsx"
      ],
      "excludePatterns": [
        "node_modules",
        "dist",
        ".git",
        "coverage",
        ".next",
        "build"
      ],
      "customRules": [
        {
          "pattern": {},
          "description": "Admin endpoint without explicit auth check",
          "severity": "HIGH",
          "fix": "Add Authorization header or use authenticated API wrapper",
          "confidence": 0.9,
          "category": "security"
        },
        {
          "pattern": {},
          "description": "Payment endpoint without explicit auth check",
          "severity": "CRITICAL",
          "fix": "Ensure payment endpoints use authenticated requests with proper validation",
          "confidence": 0.95,
          "category": "security"
        },
        {
          "pattern": {},
          "description": "Hard-coded localhost URL in production code",
          "severity": "MEDIUM",
          "fix": "Use environment variables or configuration for API base URLs",
          "confidence": 0.8,
          "category": "performance"
        },
        {
          "pattern": {},
          "description": "useQuery without explicit caching configuration",
          "severity": "MEDIUM",
          "fix": "Add staleTime and gcTime for optimal caching",
          "confidence": 0.7,
          "category": "caching"
        },
        {
          "pattern": {},
          "description": "Fetch call without caching strategy",
          "severity": "LOW",
          "fix": "Consider adding cache headers or using cached request wrapper",
          "confidence": 0.6,
          "category": "caching"
        },
        {
          "pattern": {},
          "description": "Multiple useQuery hooks that could cause race conditions",
          "severity": "MEDIUM",
          "fix": "Use query dependencies or combine into single query",
          "confidence": 0.8,
          "category": "race-condition"
        },
        {
          "pattern": {},
          "description": "Fetch without cancellation support",
          "severity": "LOW",
          "fix": "Add AbortController for request cancellation",
          "confidence": 0.7,
          "category": "race-condition"
        },
        {
          "pattern": {},
          "description": "Fetch without retry or error handling strategy",
          "severity": "MEDIUM",
          "fix": "Add retry logic and proper error handling",
          "confidence": 0.8,
          "category": "performance"
        }
      ],
      "confidenceThreshold": 0.7,
      "enableIncrementalAnalysis": true,
      "maxFileSize": 1048576
    }
  }
}